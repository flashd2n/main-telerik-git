// Generated by CoffeeScript 1.7.1
(function() {
  window.onload = function() {
    var canvas, ctx, fillColor, getRandomColor, height, radian, radianStep, rotationFrame, setup, width, x, xDir, y, yDir;
    canvas = null;
    ctx = null;
    x = 0;
    y = 0;
    width = 0;
    height = 0;
    radian = 0;
    radianStep = 0;
    xDir = +1;
    yDir = +1;
    fillColor = 0;
    getRandomColor = function() {
      var blue, green, red;
      red = Math.floor(Math.random() * 255);
      green = Math.floor(Math.random() * 255);
      blue = Math.floor(Math.random() * 255);
      return "rgb(" + red + ", " + green + ", " + blue + ")";
    };
    setup = function() {
      canvas = document.getElementById('the-canvas');
      ctx = canvas.getContext('2d');
      x = 0;
      y = 0;
      width = 20;
      height = 100;
      radian = 0;
      radianStep = 0.02;
      fillColor = {
        red: {
          value: 127,
          update: 0
        },
        green: {
          value: 127,
          update: 0
        },
        blue: {
          value: 127,
          update: 0
        },
        colorUpdate: 1,
        change: function() {
          this.blue.update = (Math.floor(Math.random() * 20)) - 1;
          if (!(this.blue.value + this.blue.update < 0 || this.blue.value + this.blue.update > 255)) {
            this.blue.value += this.blue.update;
          }
          this.green.update = (Math.floor(Math.random() * 20)) - 1;
          if (!(this.green.value + this.green.update < 0 || this.green.value + this.green.update > 255)) {
            this.green.value += this.green.update;
          }
          this.red.update = (Math.floor(Math.random() * 20)) - 1;
          if (!(this.red.value + this.red.update < 0 || this.red.value + this.red.update > 255)) {
            return this.red.value += this.red.update;
          }
        },
        toRGBString: function() {
          return "rgb(" + this.red.value + ", " + this.green.value + ", " + this.blue.value + ")";
        }
      };
      ctx.lineWidth = '5';
      return rotationFrame();
    };
    rotationFrame = function() {
      var newX, newY;
      ctx.save();
      ctx.translate(x, y + height);
      ctx.rotate(radian * Math.PI);
      newX = 0;
      newY = -height;
      ctx.fillStyle = fillColor.toRGBString();
      ctx.beginPath();
      ctx.scale(1, 2);
      ctx.arc(newX + width / 2, newY + height / 2, width, 0, 2 * Math.PI, true);
      ctx.stroke();
      ctx.fill();
      if (x + width / 2 > canvas.width) {
        xDir = -1;
      } else if (x - width / 2 < 0) {
        xDir = +1;
      }
      if (y + height / 2 > canvas.height) {
        yDir = -1;
      } else if (y - height / 2 < 0) {
        yDir = +1;
      }
      x += xDir;
      y += yDir;
      ctx.restore();
      radian += radianStep;
      radian %= 2;
      fillColor.change();
      return requestAnimationFrame(rotationFrame);
    };
    return setup();
  };

}).call(this);
