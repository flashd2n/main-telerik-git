=== TypeScript & Angular Setup ===

-> install: npm install -g typescript -> installs the typescript compiler
-> install: npm install -g tslint
-> install CLI: npm install -g @angular/cli

=== VS Code setup for TypeScript ===

-> basic config files
	-> tsconfig.json -> typescript compilation settings
		-> generate with tsc --init
	-> launch.json -> visual studio application settings
		-> generate with F5 and choose Node
	-> tasks.json -> tasks to be performed before or after compiling


=== Components ===

-> A component consists of:
	-> View -> html + bindings and directives
	-> Model -> TS class with data (properties) and logic (methods)
	-> Metadata -> defined with a decorator

---> @Component()
	-> selector: 'custom' -> html directive for the component
	-> template: '<h1></h1>' -> inline template
	-> templateUrl: 'relative-path' -> html template
	-> styleUrls: ['relative-path'] -> css style applicable only to this component

=== Directives ===

-> custom or build-in angular html tags and elements that enhance the html
-> can use a whole component as a directive by giving it a selector property and using it inside another view

-> build-in
	-> *ngIf='conditional'
		-> inserted as a html attribute
		-> if evaluated as false, the tag all its children are deleted from the dom
		-> if eveluated to true, the tag and all its children are inserted in the dom
		-> example: <table class='table' *ngIf='products && products.length'>
		-> CONTINUES TO LISTEN FOR CHANGES TO THAT CONDITION EVEN AFTER PAGE IS LOADED
	-> *ngFor='let item of collection' //-> item is each item from the collection, NOT the index
		-> used the same way as ngIf
		-> works pretty much like //each from handlebars and pug/jade

=== Data binding ===

-> interpolation
	-> one way, works like handlebars
	-> example
		-> <h1>{{classPropertyName}}</h1>
	-> can have simple conditions
		-> <button>{{showImage ? 'Hide' : 'Show'}} Images</button>
	
-> property binding
	-> one way
	-> example
		-> <img [src]='product.imageUrl'
                        [title]='product.productName' 
                        [style.width.px]='imageWidth' 
                        [style.margin.px]='imageWidth'/> // no explicit interpolation, [src] must be a valid attribute
	-> can be achieved with interpolation, but it is best practice to use property binding
	-> [class.myClass]="true" --> applies the class

-> event binding
	-> inside view template
		-> declare a standard event and a function call
		-> example
			<button (click)='myAwesomeFunction()'></button>
	-> inside model class
		-> define a standard class method that will be called when event is triggered

	-> passing data
		-> (click)='myAwesomeFunction($event)' -> sends the entire click event to the component
		-> <button (click)='clicked(#myVar)'> // -> sends the input object to the component
		   <input #myVar>


-> Two way binding
	-> achieved by using ngModel directive from angular forms module
	-> basically when something on the page changes -> a change is reflected in the model code
	-> example
		1. html -> <input type='text' [(ngModel)]='filterString' />
		2. html -> <p>{{filterString}}</p>
		3. model -> public filterString: string;
		4. angular module:
			-> import { FormsModule } from '@angular/forms';
			-> add FormsModule to imports array
	-> actions -> user types stuff into input, each change ovewrites the model property
		   -> then you display the new property in the paragraph
	-> equivalent to vanilla js
		-> on input keydown -> trigger event
		-> take the value of input
		-> store it somewhere
		-> update the content of a paragraph with new value

	-> tips and tricks
		-> bind the ndModel to a Getter and a Setter
			-> this way some logic can be executed when the event is fired

=== Pipes ===

-> used to transforms data values, like making lowercase, uppercase, adding currency to numbers and so on

-> examples of default pipes:
	-> {{product.Name | lowercase}}
	-> <img [title]='propduct.Name | uppercase'>
	-> {{product.Price | currency | lowercase}}
	-> {{product.Price | currency:'USD':true:'1.2-2'}} -> used USD as currency, displays the symbol and exactly 1 digit before the '.' and 2 after

-> building a custom pipe
	-> create a new something.pipe.ts file
	-> import { Pipe, PipeTransform } from '@angular/core';
	-> create a class than implements PipeTransform
	-> decorate with @Pipe({name: 'awesomePipeName'})
	-> define pipe logic in transform method
	-> export the class and import it in the parent module, add it to declarations
	-> use in desired template


=== Component Life Cycles ===

-> AFTER a directive/component's constructor is called, agular calls a series of hook methods
	1. ngOnChanges() -> Requires OnChanges interface -> called first and every time a data-bound input property changes
	2. ngOnInit() -> Requires OnInit interface -> called once after the constructor and onchanges
	3. ngAfterViewInit() -> Requires AfterViewInit interface -> called after component views and child view are initialized
	4. ngOnDestroy() -> just before angular destroys the component


=== Nested Components ===

-> basically a component which defines a small portion of another page
-> a nested component is used by giving it a selector name and using it in the parent comp as a html tag

-> creation steps:
	-> define the component just like a normal component
	-> import it in the corresponding module
	-> maybe use hooks like ngOnChanges

	--- receiving data from the parent component

	-> enable properties to be settable from the parent component
		-> @Input() rating: number;
	-> set the value of the exposed proeprties from the parent component view
		-> <pm-smComponent [rating]='somevalue'></pm-smComponent>

	--- sending data to the parent component

	-> from child side
		-> define a click event on a tag in the view
		-> define the class method to execute when click is triggered
		-> define an output notify event emitter
			-> @Output() notify: EventEmitter<string> = new EventEmitter<string>();
		-> inside class method
			-> this.notify.emit('very awesome click!');
	-> from parent side
		-> setup even listener in the view
			-> <pm-star (notify)='onNotify($event)'></pm-star> //$event containes the data from child
		-> setup onNotify method to hande the payload and do logic

-> communication between child and parent components is done through the parent view



=== Services ===

-> an abstraction of logic that is shared with multiple components like db CRUD, loggind, etc
-> angular manages a singleton for each service - niiiice
-> creating
	-> create a file awesome.service.ts
	-> create and export a class with the desired properties and methods
	-> decorate it with @Injectable()
	-> register the service with angular injector
		-> inside the desired component's MetaData: providers: [ProductService]
		-> when registering like that, the service can be injected in the component and all its children
	-> injecting the service instance
		-> inside the constructor -> constructor(private myService: MyService) {...}
		-> that's it... the angular injector takes care of everything


=== HTTP and Observables ===

-> angular uses an abstraction layer called Http Service to hangle the http requests
	-> we send requests to the layer and the layer sends them to the server
-> working with http:
	1. Import the http client module inside the corresponding module
		-> import {HttpClientModule} from '@angular/common/http';
		-> add to the imports array
		-> this injects an instance of the http service
	2. Inside the service file
		-> import { HttpClient } from '@angular/common/http';
		-> import { Observable } from 'rxjs/Observable';
		-> get an instance for the HttpClient
			-> constructor(private http: HttpClient) { }
		-> somehow define a server url as a string
		-> define the method that will issue the get request and return and observable
			public getProducts(): Observable<IProduct[]> {
        			return this.http.get<IProduct[]>(this.productUrl);
    			}
	---- now we have the angular http module loaded in the corresponding module
	---- an instance of the http client is injected in the desired service
	---- the service has a method that sends a request to the server
	---- the method returns an obervable of the expected return type
	---- next we need error handling and to subscribe to the observable data stream
	3. Error handling
		-> add a fuckload of imports
			import 'rxjs/add/observable/throw';
			import 'rxjs/add/operator/catch';
			import 'rxjs/add/operator/do';
		-> define an error handling method
    			private handleError(err: HttpErrorResponse) {
        			console.log(err.message);
        			return Observable.throw(err.message);
    			}
		-> chain after the get request
			.do(x => console.log(JSON.stringify(x))) // good for debuggin to view what comes
            		.catch(this.handleError);
	
	4. subscribing
		this.productService.getProducts()
            		.subscribe(products => {
                		this.products = products;
                		this.filteredProducts = this.products;
            		}, error => this.errorMessage = <any>error);


=== Routing ===

	1. in head of index.html
		-> <base href="/"> -> used to define the 'root' of the current module router
			-> if href="/bla" -> then all urls will be domain.com/bla/route
	2. in the corresponding module
		-> import { RouterModule } from '@angular/router';
		-> add the RouterModule to the imports array
	3. in the corresponding module register the routes with the RouterModule
		RouterModule.forRoot([
      			{ path: 'products', component: ProductListComponent },
      			{ path: 'products/:id', component: ProductDetailComponent},
      			{ path: 'welcome', component: WelcomeComponent},
      			{ path: '', redirectTo: 'welcoime', pathMatch: 'full'},
      			{ path: '**', redirectTo: 'welcome', pathMatch: 'full'}
    		])
	4. in the root component -> define the navigation as html tags
	5. insert the angular routing directives
		-> <li><a [routerLink]="['/products']">Products</a></li>
	6. define the placeholder for the route view in the html
		-> <router-outlet></router-outlet> -> when a route is activated the contents of the
							view will be inserted within this tag


---> more about routing

-> parameter routes
	1. register the parameter route in the RouterModule in the corresponding module
	2. insert the link to the desired place in the html
		-> <a [routerLink]="['/products', product.productId]">{{product.productName}}</a>
		-> the values after the first element are added to the URL with '/'
	3. get the value from the url
		-> import { ActivatedRoute } from '@angular/router';
		-> constructor(private route: ActivatedRoute) {}
		-> const id = +this.route.snapshot.paramMap.get('id');


-> calling a route from code
	-> import { Router } from '@angular/router';
	-> constructor(private router: Router) {}
	-> onSomeAction() { this.router.navigate(['/products']) }


-> Guards

	-> possible actions:
		-> CanActivate -> determines if the route can be accessed
		-> CanDeactivate -> determines if the route can be exited from
		-> Resolve -> pre-loads data BEFORE activating th route
	-> create a new service
	-> add the service in the providers array in the corresponding module
		-> this is important, this was the Router module can use our service for routing
	-> the new service class has to implement CanActivate from import { CanActivate } from '@angular/router';
	-> inside the module route definitions:
		{ path: 'products/:id',
        		canActivate: [ProductGuardService],
        		component: ProductDetailComponent}



=== Angular CLI ===

-> install -> npm install -g @angular/cli

	-> ng new project-name -> creates a shit ton of files
	-> ng lint -> scans the app and prints lint problems
	-> ng serve -> compiles and launches the application + auto recompile
	-> ng g -> used to create directives, components, modules, pipe, and more... use ng g --help for all info
	-> ng test -> executes unit tests
	-> ng e2e -> executes functional tests
	-> ng build -> compiles the code and puts in the dist dir
	-> ng build --prod -> minifies the code and uses hash in the name

	-> generation shorthands:
		-> ng g cl -> class
		-> ng g c -> component
		-> ng g d -> directive
		-> ng g e -> enum
		-> ng g g -> guard
		-> ng g i -> interface
		-> ng g m -> module
		-> ng g p -> pipe
		-> ng g s -> service


-> importing thrid party libraries
	-> npm install
	-> add to scripts and/or styles in angular-cli.json


----- advanced components ----

--> can put reference variable on a child selector in the parent html
	<app-child #c></app-child>
	
<button (click)="c.ChildMethod()">Do Stuff</button>
	-> c holds a reference the entire child component can call methods, fields, props
	-> can also accept values ==> transfer data from the parent template to the child component


--> Input decorator
-> used to send data from parent to child
	-> in child component, decorate a field with @Input() // the child expects an input for this field
		@Input()
		childTitle: string;
	-> can use the decorator on top of a setter -> this way we can make validation and other logic
	-> in parent template:
		<app-child [childTitle]='SetTile()'> // SetTitle is a method in the parent component
	-> this way the parent method will generate some data and send it to the child component to be used


--> Output decorator
-> used to send data from child to parent using event emitting
	-> setup event emitter in child component with Output decorator
		  @Output()
  		  childEvent: EventEmitter<string>;

  		  constructor() {
    		  this.childEvent = new EventEmitter<string>();
  		  }
	-> raise the event from a method, which can be called from the template
		ChildMethod() {
    			this.childEvent.emit('Bring me food now!!');
  		}
	-> listen for this particular event in the parent template
		-> <app-child (childEvent)="OnChildEventEmitted($event)"></app-child>
	-> define a methond in the parent component to handle the event
  		OnChildEventEmitted(ev) {
  	  		console.log(ev);
  		}


--> ViewChild decorator
-> gets a reference to either a dom element or a child component or multiple child components with ViewChildren
	-> inside parent component
		@ViewChild(ChildComponentName)
		element;
		-> reference to the entire child component // can be accessed ngOnViewInit
	-> inside parent temlate -> <h1 #someVar>Title</h1>
	-> inside parent component
		@ViewChild('someVar')
		element;
		-> reference to the dom element



--> ContentChild
-> used to get reference to elements in the <ng-content>
-> example
	-> parent template
	<app-child>
  		<p #some>Test Me!</p>
	</app-child>

	-> child template
	<h1>Child Title</h1>
	<ng-content></ng-content>

	-> child component
	@ContentChild('some')
  	el;

  	ngAfterContentInit(): void {
    		console.log(this.el);
  	}
-> important to access the element after content init


=== WORKING ON DOM ELEMENTS ====

-> Step 1 -> get reference

	-> inject ElementRef in constructor
		constructor(private elementRef: ElementRef) {} // this.elementRef has reference to the entire component
	-> 

-> Step 2 -> manipulate

	-> inject Renderer2 in constructor too
	 	constructor(private elementRef: ElementRef, private renderer: Renderer2) {}
	-> use this.renderer to dynamically create elements and append to this.elementRef.nativeElement




=== COMPONENT LIFE CYCLE ===

-> ngOnChanges 
	-> called when there is a change to an @Input field in the component
	-> get an object changes which tracks the changes to the field
-> ngOnInit
	-> called when the component is created (when navigated to the route)
	-> used for complex initializations instead of the constructor
-> ngOnDestroy
	-> called when the component is destroyed (go to another route)
	-> release resources
-> ngDoCheck
	-> called every time there is a change somewhere
-> ngView/ngContent Init/Check -> when the view/ content is created or checked after change


=== ROUTING ===

-> lazy
-> resolving
-> params subscribe
-> guards










