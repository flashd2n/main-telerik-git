--- GLOBALS ---

-> console
-> __dirname -> get the path of the current directory
-> __filename -> get the path AND the name of the current file
-> process.argv > returns an array:
	0 -> path to node.exe
	1 -> path to current file + file name
	1+ -> all other params entered after that as a separate element, except in ""

-> process.stdout.write -> writes to the console -> no new lines natively --> can write only strings and buffers NO OBJECTS
-> process.stdout.clearLine() -> deletes the current line;
-> process.stdout.cursorTo(0) -> starts writing from the start of the line

-> process.stdin.on('data', function(data){}) ---> does not end process -> listens for input and fires the event when "enter"
	-> "data" is the data from input, but use .toString().trim();

-> process.exit() -> kills the process
-> process.on('exit', function() {}) ---> do stuff right before the process ends
-> setInterval -> standard
-> setTimeout -> standard
-> var myInterval = setInterval()
	clearInterval(interval) -> kills the setInterval

-> var a = require('path') => loads the 'path' module and assigns it to 'a'

-> var readline = require('readline') => loads readline module -> stdin and stdout wrapper
	-> let rl = readline.createInterface(process.stdin, process.stdout) --> creates an instance
	-> rl.question('question', function(answer){}) -> asks a question once and listens for answer
	-> rl.setPrompt('another question') -> sets up a question to be asked multiple times
	-> rl.prompt() -> asks the set question
	-> rl.on('line', function(input){}) -> used to listen for inputs on prompts
	-> rl.on('close', function(){}) -> used to listed for closing of realine
	-> rl.close() -> stops listening


--- EVENTS ---


-> var events = require('events') --> loads events module; can be used in two ways
	1. let emitter = new events.EventEmitter(); -> creates instance and emitter.on() + emitter.emit();
	2. let EventEmitter = require('events').EventEmitter -> gets the class, not an instance
-> event emitter can raise and listen for custom events
	-> emitter.on('awesomeEvent', function(message, status){})
	-> emitter.emit('awesomeEvent', 'message', 'status')
-> can attach emitter fuctionality to any custom class
	1. let EventEmitter = require('events').EventEmitter
	2. let util = require('util');
	3. create custom class (Person)
	4. util.inherits(Person, EventEmitter) -> Person inherits EventEmitter --> very cool
	5. now every instance of person can .on(...) AND .emit(....)
	-> !!! every .emit <-> .on is linked to the specific instance -> gosho.emit('talk') will trigger only gosho.on('talk') NOT stamat.on('talk')


--- MODULES ---


-> require -> inserts a node module in the current module
	-> var coolness = required('path-to-module');
	-> module.exports = coolness
-> module.exports
	-> can export a class -> module.exports = Person; ---> require receives the class and a new instance can be created
	-> can export an instance -> module.exports = new Person() -> require receives the instance and work with it
	-> can export object:
		-> module.exports = {Person: Person, Name: 'lala'}
		-> use: let a = require() --> a.Name ---> let newInst = new a.Person();

-> exec -> used to execute other processes in our environment -> think of it a way to execute terminal commands
	1. let exec = require('chil_process').exec;
	2. exec('node -v', function(err, result){//...})
	-> used for single async process like 'node -v'

-> spawn -> used for heavier, repetitve child commands
	1. let spawn = require('child_process').spawn;
	2. let childProcess = spawn('node', ['params']) -> first is command name, in array -> everything after the command name
	-> get output data from child -> childProcess.stdout.on('data', function(data){//..})
	-> write data to child -> childProcess.stdin.write('string')
	-> listen for child events -> childProcess.on('eventName', function(){//..})
		-> possible case -> 'exit'


--- FILES SYSTEM ---

-> get the file system module -> let fs = required('fs'); // can do everything with the file system

-> read a directory
	-> get the module
	-> Option (A) ->let files = fs.readdirSync('directory'); // SYNC call -> blocking request -> good only for init configs
	-> Option (B) -> fs.readdir('./lib', (err, data) => {//....}); // ASYNC CALL -> use this
	-> can be wrapped in promise -> const filesPromise = () => {

    						return new Promise((resolve, reject) => {

        						fs.readdir('path-to-directory', (err, data) => {

            							if (err) {
                							reject(err);
            							} else {
                							resolve(data);
            							}

        						});
    						});
					};
	filesPromise().then((data) => {//..}).catch((err) => {//..});


-> read the contents of a file
	-> same as above
	-> fs.readFile('path-to-file', 'UTF-8', (err, data) => {//..}); // there is Sync version of the command
	-> let stats = fs.statSync('filename.withExtension'); -> stats.isFile() -> checks if file


-> create and append files
	-> let fs = require('fs')
	-> get/create a string (contents for the file)
	-> fs.writeFile('fileName.withExtension', mycontentsFile, (err) => {//..}) -> creates the file and fires the callback, if erro -> passes the error


	-> fs.appendFile('name-of-file', contents);

-> create directory
	-> let fs = require('fs');
	-> fs.mkdir('name', (err) => {//...}); -> executes when ready (ASYNC) and passes err obj if error
	-> fs.existsSync('name') -> checks if directory with this name exists -> returns bool

-> rename and move files
	-> let fs = require('fs');
	-> fs.rename('path-to-file', 'new-path-to-file', (err) => {//..}) -> can be sync action
		-> if you keep the same directory -> will rename
		-> if you give a new directory -> will move (and) rename
	
	-> fs.unlink('path-to-file', (err) => {//..}) -> deletes a file, there is a sync option


-> move and delete directories
	-> let fs = require('fs');
	-> fs.rename('dir-path', 'new-dir-path', (err) => {//..}) -> move or rename a directory, can be Sync
	-> fs.rmdir('dir-path', (err) => {//..}) -> deletes a directory // cannot delete a non-empty directory

-> read stream -> used to process large files
	-> let fs = require('fs');
	-> let stream = fs.createReadStream('path-to-file', 'UTF-8');
	-> stream.once('data', () => {//..}) -> invoked once when data is read (at the start)
	-> stream.on('data', (dataBite) => {//..}) -> processes 16 bit information??
	-> stream.on('end', () => {//..}) -> invoked once when finished reading

-> write stream -> used to write large data to files
	-> let fs = require('fs');
	-> let stream = fs.createWriteStream('path-to-file'); // opens stream connection
	-> stream.write('content');
	-> stream.close(); // closes the stream connection


---- HTTP -----

-> Build http/s request
	1. let http = require('http'); // can use 'https'
	2. let options = {} -> an options object to contain the request parameters
		1. hostname: 'target domain',
		2. path: 'path-to-resource-after-domain'
		3. method: 'GET', 'POST', etc
		4. port: 443 / 80 / 8080, etc
		5. protocol: 'protocol' -> defaults to http
		6. headers: {} -> object with request headers
		7. auth: 'basic auth' -> like 'user:password'
	3. let request = http.request(options, (res) => {//..})
	4. INSIDE the callback -> handle the response data inside the callback
	5. res acts like readStream
	6. res.setEncoding('UTF-8'); -> sets the encoding -> otherwise it is bytes stream
	7. events:
		1. res.once('data', (chunk) => {//...})
		2. res.on('data', (chunk) => {//..}) -> for every received chunk of data
		3. res.on('end', () => {//..}) -> when the file is downloaded
	8. req.on('error', (err) => {//..}) // -> handle request errors
	9. req.end(); -> kills the request connection

-> can use only http.get('url', callback) -> sets the method to 'GET' and calls request.end() automatically


-> Build web server
	1. require http
	2. let server = http.createServer((request, response) => {//...}) -> the function will be called on every request to the server
		1. response.writeHead(statusCode, {header: elements});
		2. response.end('server response data')
	3. server.listen(ip:port) // can just use (3000) to listen to localhost:3000;
-> request data:
	-> request.url -> the path after the domain => just '/' if home
	-> request.method -> 'GET', 'POST', etc



-> Build file server -> return some file as a result of a response
	-> build server
	-> analyze request url and method
	-> return the desired file contents

	1. require the folloing modules: 'http', 'fs', 'path'
	2. http.createServer()
		1. if request.url === '/' -> return index.html
			1. fs.readFile......
			2. response.writeHead
			3. response.end(html)
		2. if request is for .css / .jpg
			1. let pathToStyle = path.join(__dirname, 'public', request.url);
			2. let styleStream = fs.createReadStream(pathToStyle, 'UTF-8'); // for JPG read the file as binary
			3. styleStream.pipe(response); -> opens a read stream and streams the data to the response (it is writeable stream) AND auto-closes the connection


-> can chain -> fs.createReadStream(...).pipe(response);


-> Create API -> server that servers only json data to clients
	-> just like building a normal file server
	-> can get the json data by = let data = require('path-to-json-file') --> returned as .js object
	-> content-type in response header is -> application/json or text/json
	-> response.end(JSON.stringify(jsonData));


-> Handle POST requests
	-> same as everything else
	-> check for request.method
		-> if === POST -> collect the data sent
		-> request is streaming data to the server, so wire a listener
			-> request.on('data', (chunk) => {//...}) // .once // end
		-> inside .end -> build the response headers and response body



---- Express ----


-> most popular framework for building node servers

	1. let express = require('express');
	2. let app = express();
	3. app.use() // this is called "middleware" -> plugins for express to use to do its job -> invoked on everu request to the server
		1. app.use(express.static('./public')) // simplest -> express will serve all files in that directory, '/' is auto-bound to index.html
		1.1 app.use((request, response, next) => {//...}) -> custom middleware => here you can perfom custom operations 
			on/with the request object, can also form a response...when no response is formed -> use next() to move to the next middleware
	4. app.listen(port)
	5. module.exports = app; -> good idea to export the app for testing purposes


-> build api routes
	1. after all is set, below express.static
	2. app.get('route', (req, res) => {res.json(data)}) // makes a get route // .json(data) does everything -> stringify data, setup reponse headers and end the response
	3. app.post('route', (req, res) => {//..}) // after bodyParser is set, req.body will contain the posted data
		1. before all:
			1. const bodyParser = require('body-parser');
			2. app.use(bodyParser.json());
			3. app.use(bodyParser.urlencoded({extended: false}));
	4. app.delete('route/:term', (req, res) => {//..}) --> req.params.term will contain the value of ":term"

-> add cross origin api access
	-> require cors
	-> app.use(cors()); // every route after this definition will be open for access from other domains

-> res.sendFile(absolutePath, (err) => {//...}) -> can be used to send file like html
	-> in err callback can do -> res.status(500).send(err) -> sets the status code and returns the error

-> Error middleware -> use to handle errors in the server // VERY IMPORTANT
	-> define function(err, req, res, next) {//...} --> after all routes to handle the error
	-> from any route call next(new Error('msg')) and this will trigger the error middleware

-> Route level middleware -> triggered only when a route is hit, before the actual callback of the route
	-> app.get('/users', checkAuth(), (req, res) => {//...})
		-> the middleware can be used here to respond -> for example if access is not authorized
							      -> or call next(), if all good
-> Param middleware
	-> app.get('/users/:id'......) -> this is the route
	-> app.param('id', (req, res, next, reqId) => {//...}) // this will fire before(!!!) any route that has 'id' as param
		and pass the valid of 'id' to reqId...need to do stuff and call next inorder to proceed forward

-> Custom middleware with custom param
	-> var myMdw = function(options) {return function(req, res, next) {//..}} has access to options and does middleware work
	-> call -> app.use(myMdw({name: 'lalal'}));

-> Custom middleware without custom param
	-> var myMdw = function(req, res, next) {//...}
	-> call -> app.use(myMdw)

-> Express router -> used to abstract away the handling of certain routes
	-> require express, get the app, const myrouter = express.Router(); // can be done const router = require('express').Router()
	-> myrouter.get('/'....)
		-> can be used like -> myrouter.route('/').get(...).post(....).....
	-> app.use('/something', myrouter)
		-> when something is hit, go and checkout what is happening in myrouter

-> Short-hand for routing
	-> app.route('/').get((req, res) => {//..}).post(...).put(...)....
	-> customRoute.route('/').get((req, res) => {//..}).post(...).put(...)....


--- WEBSOCKETS ---


-> always open connection between a websocket server and a websocket client -> server can push data to clients e.g. notifications, messages, etc

	1. Setup WS Server
		1. const WebSocketServer = require('ws').Server; // npm install ws
		2. const wss = new WebSocketServer({port: 3000}) // creates server instance and specifies port
		3. Setup server functionality
			1. wss.on('connection', (wsc) => {//...}) // fires once when a new client connects
				1. wsc.send('content') -> sends a message to the client
				2. wsc.on('message', (msg) => {//...}) // fires once a message is received from the client	
				3. wsc.close() -> kills the connection to that client
				4. wss.clients -> array of all connected clients, can forEach them



	2. Setup WS Client
		1. Inside normaln .js file, linked to a html page
		2. const wsc = new WebSocket('ws://domain:3000'); // domain can be localhost when doij stuff locally
		3. set up client funcitonality listeners
			1. wsc.onopen = () => {//...} // fires once when the connection is established
			2. wsc.onmessage = (msg) => {//...} // fires every time the server sends a message -> get the contents but msg.data
			3. wsc.onclose = () => {//...} // fires once when the connection closes
		4. Send data to the server
			1. wsc.send('content');



---- SOCKET.IO ----
-> useful, because provides fallback func when browsers do not support websockets natively


	1. Setup Server
		1. const express = require('express');
		2. const http = require('http');
		3. const app = express();
		4. const server = http.createServer(app).listen(3000);
		5. const io = require('socket.io')(server);
		6. set up express to serve the files -> app.use(express.static('./public'));
		7. setup socket.io functionality
			1. io.on('connection', (client) => {//..}) -> fires when new connection
			1.1. INSIDE -> client.emit('message', content) -> sends message to client
			1.2. client.on('chat', (msg) => {//..}) -> fires when that client raises a chat event and reeives the msg
			1.3. client.broadcast.emit('message', content) -> the client can send a message to all connected clients


	2. Setup Client
		1. link socket.io js file from socket.io-client
		2. const socket = io('http://domain:port') -> io() comes from the socket.io-client js file
		3. socket.on:
			1. ('connect')
			2. ('disconnect')
			3. ('message')
		4. socket.emit('chat', content) -> send message to server


--- TESTING AND DEBUGGING ---

-> test invironment setup
	1. install mocha globally -> used to run the tests, so you don't need it locally
	2. setup a test dir to hold all the tests files
	3. install chai --safe-dev
	4. require chai in each test file -> const expect = require('chai').expect;

-> DO NOT USE LAMBDA -> fucks up mocha context

-> Test structure
	-> describe('some cathegory', function() {
		it('specific test', () => {//...})	
	   })

	
-> Testing async actions
	1. normal structure
	2. insert a parameter in it function -> it('awesome test name', function (done) {//..})
	3. place done() after the expect statement of the async operation -> mocha will wait for done to be called to finish the test
	4. if needed can up the timeout limit by "this.timeout(5000)" inside the closest describe statement of the currect test

-> Mocking http requests -> sending http request to external server
	1. require 'nock' -> mocks http requests
	2. setup nock mock before the tests
		1. before(function() {//..})
		2. INSIDE -> nock.('domain').get/.post/.etc('path').reply(statusCode, 'response');
	3. Can use before/beforeEach/after/afterEach

-> Injecting dependencies -> works well when injecting JSON file into a module
	-> case -> sut gets data by requiring another module, called 'inventory' and then does some work
	1. install rewire
	2. const rewire = require('rewire'); -> in test file
	3. const sut = rewire('path-to-file'); -> use this instead of require so that rewire can inject dependencies
	4. use beforeEach or before to setup the fake data
	5. INSIDE beforeEach -> sut.__set__('inventory', testData);
		-> now rewire will replace the dependency 'inventory' with the test data for every test
	-> when creating fakes, use this.myFake = {}.... in order to preserve access to the fake in the tests


-> Sinon
	-> spies -> fake functions that provide info about their call count and other details
	-> stubs -> more powerful spies -> can control return behavior

-> Sinon And Rewire
	-> Mocking the console
		1. require chai, rewire, sinon and sut
		2. beforeEach
			1. declare fake console -> this.consoleMock = {log: sinon.spy()};
			2. inject dependency -> sut.__set__('console', this.consoleMock);
		3. In test class all calls to console will be faked
		4. be careful not to lose 'this' -> let _this = this;
		4. Assert against console -> expect(_this.consoleMock.log.callCount).to.equal(n);

	-> can also declare mockConsole and inject it inside a particular test, if you want it done for that test only
	-> then to undo the injection:
		-> let revert = sut.__set__('console', consoleMock);
		-> revert();
            	-> done();

-> Code coverage
	-> install -g istanbul
	-> run -> istanbul cover _mocha -> enjoy
		-> will fail -> istanbul cover full-path
			     -> istanbul cover C:/Users/Flash/AppData/Roaming/npm/node_modules/mocha/bin/_mocha

-> Supertest -> test http/express server responses -> simulates requests and analyzes responses
	-> instal supertest --save-dev
	-> const request = require('supertest');
	-> const app = require(path-to-server) // needs to be exported
	-> usage: request(app).get/.post/.etc('route')
				.set(key-value pairs for request headers)
				.send(for post/delete/put)
				.expect('Content-Type', /json/)
				.expect(200(statusCode))
				.end(done) -> ends the test
				.end(function(err, res) {//analyze the response with res.text and done})
	-> when testing json response
		-> .end(function(err, res) { let check = JSON.parse(res.text)...expect...deep.equal...})

-> Cheerio -> used to check the HTML response from http/express server
	-> instal cheerio --save-dev
	-> const cheerio = require('cheerio');
	-> .end(function(err, res){
		let $ = cheerio.load(res.text);
		//...query the response just like a normal jQuery and expect....
	})


--- ORGANIZATION AND STRUCTURE ---

-> service orientated
	-> config/
	-> api/
		-> lions/
			-> lionModel.js
			-> lionController.js
			-> lionRoutes.js
	-> utils/
	-> index.js -> entry point -> fires listen on server
 

-> environment variables -> useful to set application-level variables -> example -> when in testing env or production env or development env
	-> env set ->  process.env.NODE_ENV = 'testing', 'production', 'development'
	-> define these env variables in a config file and use it to change behaviour
	-> do not hard code values for the variables
	-> use the deployment engine to set them -> like heroku or AWS




















