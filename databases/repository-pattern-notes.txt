---Initial

-> create folder repositories in Data
-> extract IDbContext interface
	-> add all dbsets -> IDbSet<Class>
	-> int SaveChanges();
	-> DbSet<TEntity> Set<TEntity>() where TEntity : class; // used for All()
	-> DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class; // used for Add()
	-> implement the methods in context class

	public new IDbSet<TEntity> Set<TEntity>()
            where TEntity : class
        {
            return base.Set<TEntity>();
        }

--- Building repository

-> create interface IRepository<TEntity>
	->IQueryable<TEntity> All();

        ->TEntity FindById(object id);

        ->void Add(TEntity entity);

        ->void Remove(TEntity entity);

        ->void Update(TEntity entity);

        ->void SaveChanges();

-> create EfRepository<TEntity> : IRepository<TEntity>

	->private readonly IDbContext data;
	  private readonly IDbSet<TEntity> set;

        ->public EfRepository(IDbContext data)
          {
              this.data = data;
	      this.set = data.Set<TEntity>();
          }

	-> public void Add(TEntity entity)
           {
               this.ChangeState(entity, EntityState.Added);
           }

        -> public IQueryable<TEntity> All()
           {
               return this.set;
           }

        -> public TEntity FindById(object id)
           {
               return this.set.Find(id);
           }

        -> public void Remove(TEntity entity)
           {
               this.ChangeState(entity, EntityState.Deleted);
           }
        
        -> public void Update(TEntity entity)
           {
               this.ChangeState(entity, EntityState.Modified);
           }

        -> public void SaveChanges()
           {
               this.data.SaveChanges();
           }

        -> private void ChangeState(TEntity entity, EntityState state)
           {
               var dbEntry = this.data.Entry(entity);
               dbEntry.State = state;
           }
		






