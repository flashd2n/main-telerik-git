---- BASIC XHP

let request = new XMLHttpRequest();

// set up the request -> request.open('GET/POST', 'path-to-file // URL');
// *optional set request headers -> request.setRequestHeader('header', value); ---> request.setRequestHeader('Content-type', 'application/json');
// set event handler for when the request is ready -> request.onreadystatechange = function() {//check for readyState === 4 and status === 200 and do stuff}
// send the request to the server -> request.send();
// when sending POST -> request.send(*body of the request*) -> must be text -> maybe XML, maybe JSON.stringify

readyState codes: 
	0 -> request not yet initialized
	1 -> request set up
	2 -> request sent
	3 -> request in process
	4 -> request complete


---> backward compatibility

if(window.XMLHttpRequest){request = new XM.....} else { request = new ActiveXObject("Microsoft.XMLHTTP")}


---- FETCH API ----


fetch('url', {options}).then(function(response){ //handle response }); ---> returns a fetch object, handle like a promise

-> here response is the returned fetch object
-> response.ok -> bool -> true if status code is 2XX
-> response.json() -> a promise object

-> flow:
	1. fetch
	2. 	.then(function(fetchResponse){ //check if status ok and return fetchResponse.json() })
	3. 	.then(function(parsedJSONObject){ // do stuff with the JSON object NO PARSING })
	4. 	.catch(function(error){ // handle the error YOU throw if the response was not OK })

---- AJAX and jQUERY ----

$.get(URL)
	.done(function(response) { // this is a parsed JSON object ready to do stuff  })
	.fail(function(error) { // this is executed when the response code is anythig other than 200});


---> $.ajax({
	url: -> a string with the desctination of the request
	success: -> a callback function fired if the request is successfull -> the retrieved data is passed as an argument to the fucntion
	error: -> a callback function fired if the request is not successfull -> the returned error object is passed as an argument to the function
	cache: false (true by default) -> turns of the caching functionality of the browser for the request, so I can display changed content without reloading the page...might be good or not
	type: 'POST/GET/Other' -> use POST to send data to the server
	data: and object with key-> value pairs. If used with POST, the data is send as "form data"; if used with GET, the data is send in the URL as query string
	dataType: 'json', 'xml', 'html' or 'script' -> defines the expected data type from the request
	contentType: 'application/json' -> sets the type of the data being sent to the server
})


---- TIPS

-> minimize the number of ajax requests
-> better take everything in a single request
-> GET is faster than POST