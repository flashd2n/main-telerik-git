=== Routing ===

-> configured in the RouteConfig in App_Start


=== Controllers ===

--> ActionResult -> the product of a controller method, can return http response code, redirect, json, string, view
	-> View(*"viewName") -> returns a view (in case of no parameters, return the view that matches the name of the method)
	-> PartialView() -> same as above, but does not load the layout of the view, only the view itself
	-> Json(//data...) -> returns a json
	-> RedirectToRoute -> redirects to another route
--> Selectors
	-> [HttpPost] or other verbs
	-> [ActionName("my-custom-name")] -> replaces the method name with this in the url
					  -> needs to specify the view correctly -> View("About") // for About method
--> Filters
	-> Authorization filter // what users or groups have access
		->[Authorize(Roles="administrator", Users="gosho")] // -> administrators and user gosho can access that controller action
		->[Authorize] // any logged in user can access this action
		-> can be used to decorate the controller or a controller method
	-> Action filter // applied after or before or both the action is executed
		1. create a class and inherit from ActionfilterAttribute class
		2. Override OnActionExecution for before action logic or OnActionExecuted for after action logic
		3. use the custom filter as default filters
	-> Exception filter // handles exception within the execution of the action
		-> [HandleError(View="MyErrorView")] // show my view, not the default
		-> [HandleError(View="MyAwesomeErrorView", ExceptionType=typeof(ArgumentException))] // shows my view, when specified exception happens

=== Views ===

--> Razor and helpers

@{ 
    var amounts = new List<decimal> { 100, 25.00m, -23, 42.42m };
}

<ul>
    @foreach(var am in amounts)
    {
        <li>@formatAmount(am)</li>
    }
</ul>


@helper formatAmount(decimal amount) {
    var color = "green";
    if (amount < 0)
    {
        color = "red";
    }
    <span style="color: @color">@String.Format("{0:c}", amount)</span>
}

--> Layouts

-> define common partial html code to be reused (like headers and footers)
-> _ViewStart.cshtml -> called before each view in /Views -> used to extract Layout setting and/or other more complicated UI logic

-> @RenderBody() -> the place where the html code from the View will be injected
-> @RenderSection("sectionName", required: bool) -> the place where a section from the View will be injected, if present
	-> will throw HttpException if section is required, but not defined in the View



---> Helpers


-> @Html.ActionLink("display name", "controller action name", "controller name", "routing data?", "html attributes")
	-> example: <p>@Html.ActionLink("Log in", "Login", "Account", null, new { @class = "btn btn-default" })</p>
-> @Html.Partial("_LoginPartial") // -> injects html code from another common file
	-> useful to extract more complex logic -> like auth checking for UI rendering
-> @Html.BeginForm() -> builds a form
	-> example: using(Html.BeginForm(//..)){ //... } // using is necessary because it will place the closing tag at the closing curly brace
-> @Html.Action() -> renders a parial view, but NOT by calling the view itself. Calls a method within a controller
	-> example: @Html.Action("Serial", "Home", new { letterCase = "lower" })
	-> calls Serial action from Home controller and passes letterCase
	-> the action returns a string, which is then inserted in the page


---> Bundles

-> used for bundling and minification of css and js files
1. Register the bundles in the BundleConfig
	-> for JS -> bundles.add(new ScriptBundle("runtime relative path", "cdn path").Include("current relative path"))
	-> for CSS -> bundles.add(new StyleBundle("runtime relative path", "cdn path").Include("current relative path"))
	-> inside Include cann list multime files for bundling
	-> current relative path options:
		-> "~/Scripts/jquery-{version}.js" -> {version} is a placeholder for the jquery version -> will work when version number is changed
		-> "~/Scripts/jquery.validate*" -> * will ignore whatever follows after * and take the file
	-> BundleTable.EnableOptimizations = true; -> forces the bundling and minification even when in debug mode
	-> bundles.UseCdn = true; -> must be enabled if using cdn links

2. Use in Views
	-> for JS -> @Scripts.Render("~/bundles/jquery") -> will search the runtime relative path for the registered js bundle
	-> for CSS -> @Styles.Render("~/Content/css") -> will search the runtime relative path for the registered css bundle



=== Models ===

--> basic creation
	1. Create model like a normal .cs file, like a regular db model
	2. right-click controllers and create controller with settings
	3. right-click controller method for get and generate view with settings
	4. pass the model to the View() in the controller

=== Security and Identity ===

--> Program initialization path:
	1. Global.asax.cs -> configures the bundles, the filters, the areas and the routes
	2. Startup.cs -> calls authconfig
	3. Startup.Auth.cs -> configures app authentication by defining or attaching objects
		-> app.CreatePerOwinContext<T>();
			-> accepts a Func callback that returns some object and can be accessed from the Owin context
		-> app.CreatePerOwinContext(ApplicationDbContext.Create); // -> gives a db context when called
		-> app.CreatePerOwinContext<ApplicationUserManager>(ApplicationUserManager.Create); // -> gets a UserNamager when called
			-> UserManager -> can be configured:
				-> how to validate username/email
				-> how to validate password
				-> sms/email services for two factor auth
				-> Uses an instance of ApplicationUser, which inherits from IdentityUser, which is basically a model for the user with props
				-> used to create users in the DB + validates User properties AND hashes the password
			-> can be accessed by:
				-> HttpContext.GetOwinContext().GetUserManager<ApplicationUserManager>();

---> Claims
-> statements for a user, created by the identity provider inside SignInManager, called by SignInAsync
	-> a statement can contain a lot of things like email, role, username, etc
	-> this information is stored in the auth cooker, created by the SignInManager
	-> the idea is to have access to this info from the cookie and not make DB calls

-> Creating a claim:
	-> when registering a new user
		1. After the user is created in the DB and an id is assigned
		2. UserManager.AddClaim(user.Id, new Claim(ClaimTypes.GivenName, model.FirstName));
			-> good idea is to use the constants ClaimTypes... because they contain schemas
		3. When the execution of the registration proceeds, the SignInManager will be called to SignInAsync the user
			-> this is where the identity is created, which issues the cookie and adds the info about the claim to the cookie

-> Accessing a claim:
	-> inside the appropriate view:
		-> @using System.Security.Claims
		-> var identity = (ClaimsIdentity)User.Identity;
		-> var name = identity.FindFirstValue(ClaimTypes.GivenName) ?? User.Identity.GetUserId();

---> ApplicationUser properties
-> another way to add more info to the identity object, but this (unlike claims) will be persisten in the DB

-> Creating a persistent identity property
	1. Inside ApplicationUser
	2. Add a new property public string Pin { get; set; }
	3. Add-Migration
	4. Update-Database

-> Accessing the custom property

	    var userId = User.Identity.GetUserId();
            var manager = HttpContext.GetOwinContext().GetUserManager<ApplicationUserManager>();
            var user = manager.FindById(userId);
            var userPin = user.Pin;
	-> maybe this is more convenient whan writing a standard Db EF query 


---> Roles and Assignments

->  Restricting access by role
	-> decorate an action with [Authorize(Roles = "Admin")]

-> Creating a role and decorating a user
	1. var role = new IdentityRole { Name = "Admin" };
	2. DbContext.Roles.AddOrUpdate(x => x.Name, role);
	3. userManager.AddToRole(user.Id, "Admin");

-> Full Custom User Creation With Roles Assignment

	    var userStore = new UserStore<ApplicationUser>(context);
            var userManager = new UserManager<ApplicationUser>(userStore);

// do not use ApplicationUserManager in Configuration DB Seed
// UserManager uses the default password validation

            if (!context.Users.Any(x => x.UserName == "admin@test.com"))
            {
                var user = new ApplicationUser { UserName = "admin@test.com", Email = "admin@test.com" };
                userManager.Create(user, "passW0rd!");

                var service = new CheckingAccountService(context);
                service.CreateCheckingAccount("Admin", "Pesho", user.Id, 1500m);

                var role = new IdentityRole { Name = "Admin" };

                context.Roles.AddOrUpdate(x => x.Name, role);
                context.SaveChanges();

                userManager.AddToRole(user.Id, "Admin");
            }




















